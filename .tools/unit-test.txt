-	script	hashtable-test	FAKE_NPC,{
	function assert {
		if (getarg(0)) {
			.stats[1]++;
			mesf("\033[0;32mSuccess:\033[0m %s.", getarg(1));
		} else {
			mesf("\033[0;31mError:\033[0m %s.", getarg(1));
		}
		return .stats[0]++;
	}

	assert(htnew() == 1, "create hashtable 1");
	assert(htnew() == 2, "create hashtable 2");
	assert(htdelete(2), "delete hashtable 2");
	assert(htnew() == 3, "create hashtable 3");

	assert(htexists(1), "hashtable 1 exists");
	assert(htsize(1) == 0, "hashtable 1 has size 0");

	assert(htput(1, "key 1", "value 1"), "set key 1 of hashtable 1");
	assert(htput(1, "key 2", "value 2"), "set key 2 of hashtable 1");
	assert(htsize(1) == 2, "hashtable 1 has size 2");
	assert(htclear(1), "clear hashtable 1");
	assert(htsize(1) == 0, "hashtable 1 has size 0");

	assert(htput(1, "key 1", "value 1"), "set key 1 of hashtable 1");
	assert(htput(1, "key 2", "value 2"), "set key 2 of hashtable 1");
	assert(htput(1, "key 3", "value 3"), "set key 3 of hashtable 1");
	assert(htput(1, "key 2", "value 22"), "overwrite key 2 of hashtable 1");
	assert(htsize(1) == 3, "hashtable 1 has size 3");

	assert(htget(1, "key 1") == "value 1", "get key 1 of hashtable 1");
	assert(htget(1, "key 2") == "value 22", "get key 2 of hashtable 1");
	assert(htget(1, "key 3") == "value 3", "get key 3 of hashtable 1");
	assert(htget(1, "key ?") == 0, "get key ? of hashtable 1");
	assert(htget(1, "key ?", "hello") == "hello", "get key ? with fallback of hashtable 1");

	assert(htiterator(1) == 1, "create iterator 1 from hashtable 1");
	// at this point the iterator should be behind the first key
	assert(htinextkey(1) == "key 1", "forward iterator 1 to next (first) key");
	assert(htinextkey(1) == "key 2", "forward iterator 1 to next key");
	assert(htinextkey(1) == "key 3", "forward iterator 1 to next key");
	assert(htiexists(1), "check if key exists in iterator 1");
	assert(htinextkey(1) == "", "forward iterator 1 to next key");
	assert(htiexists(1) == 0, "check if key exists in iterator 1");
	assert(htiprevkey(1) == "key 3", "rewind iterator 1 to prev key");
	assert(htiprevkey(1) == "key 2", "rewind iterator 1 to prev key");
	assert(htilastkey(1) == "key 3", "forward iterator 1 to last key");
	assert(htifirstkey(1) == "key 1", "rewind iterator 1 to first key");

	assert(htidelete(1), "delete iterator 1");
	assert(htdelete(1), "delete hashtable 1");
	assert(htdelete(3), "delete hashtable 3");

	mesf("Tests complete. [%02d/%02d]", .stats[1], .stats[0]);
	charcommand("@mapexit"); // dirty workaround
}
